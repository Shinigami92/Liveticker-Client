//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.34014
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// Dieser Quellcode wurde automatisch generiert von wsdl, Version=4.0.30319.18020.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_LiveTickerService", Namespace="LiveTickerService")]
public partial class LiveTickerService : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback addEventOperationCompleted;
    
    private System.Threading.SendOrPostCallback deleteEventOperationCompleted;
    
    private System.Threading.SendOrPostCallback getEventsOperationCompleted;
    
    private System.Threading.SendOrPostCallback getEventUpdatesOperationCompleted;
    
    private System.Threading.SendOrPostCallback getEventOperationCompleted;
    
    private System.Threading.SendOrPostCallback getIconForEventOperationCompleted;
    
    private System.Threading.SendOrPostCallback modifyEventTitleOperationCompleted;
    
    private System.Threading.SendOrPostCallback modifyEventDescriptionOperationCompleted;
    
    private System.Threading.SendOrPostCallback modifyEventDateOperationCompleted;
    
    private System.Threading.SendOrPostCallback modifyEventIconOperationCompleted;
    
    private System.Threading.SendOrPostCallback addTickOperationCompleted;
    
    private System.Threading.SendOrPostCallback getTickOperationCompleted;
    
    private System.Threading.SendOrPostCallback getTickUpdatesOperationCompleted;
    
    private System.Threading.SendOrPostCallback getAllTicksOperationCompleted;
    
    private System.Threading.SendOrPostCallback getAllTicksSinceOperationCompleted;
    
    private System.Threading.SendOrPostCallback getTickUpdatesAdminOperationCompleted;
    
    private System.Threading.SendOrPostCallback getAllTicksAdminOperationCompleted;
    
    private System.Threading.SendOrPostCallback getAllTicksSinceAdminOperationCompleted;
    
    private System.Threading.SendOrPostCallback publishTickOperationCompleted;
    
    private System.Threading.SendOrPostCallback deleteTickOperationCompleted;
    
    private System.Threading.SendOrPostCallback canUpdateCacheOperationCompleted;
    
    /// <remarks/>
    public LiveTickerService() {
        this.Url = "http://ws.oosg1.edu.schlenter-simon.de/LiveTickerService.svc";
    }
    
    /// <remarks/>
    public event addEventCompletedEventHandler addEventCompleted;
    
    /// <remarks/>
    public event deleteEventCompletedEventHandler deleteEventCompleted;
    
    /// <remarks/>
    public event getEventsCompletedEventHandler getEventsCompleted;
    
    /// <remarks/>
    public event getEventUpdatesCompletedEventHandler getEventUpdatesCompleted;
    
    /// <remarks/>
    public event getEventCompletedEventHandler getEventCompleted;
    
    /// <remarks/>
    public event getIconForEventCompletedEventHandler getIconForEventCompleted;
    
    /// <remarks/>
    public event modifyEventTitleCompletedEventHandler modifyEventTitleCompleted;
    
    /// <remarks/>
    public event modifyEventDescriptionCompletedEventHandler modifyEventDescriptionCompleted;
    
    /// <remarks/>
    public event modifyEventDateCompletedEventHandler modifyEventDateCompleted;
    
    /// <remarks/>
    public event modifyEventIconCompletedEventHandler modifyEventIconCompleted;
    
    /// <remarks/>
    public event addTickCompletedEventHandler addTickCompleted;
    
    /// <remarks/>
    public event getTickCompletedEventHandler getTickCompleted;
    
    /// <remarks/>
    public event getTickUpdatesCompletedEventHandler getTickUpdatesCompleted;
    
    /// <remarks/>
    public event getAllTicksCompletedEventHandler getAllTicksCompleted;
    
    /// <remarks/>
    public event getAllTicksSinceCompletedEventHandler getAllTicksSinceCompleted;
    
    /// <remarks/>
    public event getTickUpdatesAdminCompletedEventHandler getTickUpdatesAdminCompleted;
    
    /// <remarks/>
    public event getAllTicksAdminCompletedEventHandler getAllTicksAdminCompleted;
    
    /// <remarks/>
    public event getAllTicksSinceAdminCompletedEventHandler getAllTicksSinceAdminCompleted;
    
    /// <remarks/>
    public event publishTickCompletedEventHandler publishTickCompleted;
    
    /// <remarks/>
    public event deleteTickCompletedEventHandler deleteTickCompleted;
    
    /// <remarks/>
    public event canUpdateCacheCompletedEventHandler canUpdateCacheCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("LiveTickerService/LiveTickerService/addEvent", RequestNamespace="LiveTickerService", ResponseNamespace="LiveTickerService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool addEvent(string name, string description, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] icon, System.DateTime when) {
        object[] results = this.Invoke("addEvent", new object[] {
                    name,
                    description,
                    icon,
                    when});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginaddEvent(string name, string description, byte[] icon, System.DateTime when, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("addEvent", new object[] {
                    name,
                    description,
                    icon,
                    when}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndaddEvent(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void addEventAsync(string name, string description, byte[] icon, System.DateTime when) {
        this.addEventAsync(name, description, icon, when, null);
    }
    
    /// <remarks/>
    public void addEventAsync(string name, string description, byte[] icon, System.DateTime when, object userState) {
        if ((this.addEventOperationCompleted == null)) {
            this.addEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddEventOperationCompleted);
        }
        this.InvokeAsync("addEvent", new object[] {
                    name,
                    description,
                    icon,
                    when}, this.addEventOperationCompleted, userState);
    }
    
    private void OnaddEventOperationCompleted(object arg) {
        if ((this.addEventCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.addEventCompleted(this, new addEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("LiveTickerService/LiveTickerService/deleteEvent", RequestNamespace="LiveTickerService", ResponseNamespace="LiveTickerService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool deleteEvent(int id) {
        object[] results = this.Invoke("deleteEvent", new object[] {
                    id});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegindeleteEvent(int id, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("deleteEvent", new object[] {
                    id}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EnddeleteEvent(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void deleteEventAsync(int id) {
        this.deleteEventAsync(id, null);
    }
    
    /// <remarks/>
    public void deleteEventAsync(int id, object userState) {
        if ((this.deleteEventOperationCompleted == null)) {
            this.deleteEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteEventOperationCompleted);
        }
        this.InvokeAsync("deleteEvent", new object[] {
                    id}, this.deleteEventOperationCompleted, userState);
    }
    
    private void OndeleteEventOperationCompleted(object arg) {
        if ((this.deleteEventCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.deleteEventCompleted(this, new deleteEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("LiveTickerService/LiveTickerService/getEvents", RequestNamespace="LiveTickerService", ResponseNamespace="LiveTickerService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public Event[] getEvents() {
        object[] results = this.Invoke("getEvents", new object[0]);
        return ((Event[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetEvents(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getEvents", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public Event[] EndgetEvents(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Event[])(results[0]));
    }
    
    /// <remarks/>
    public void getEventsAsync() {
        this.getEventsAsync(null);
    }
    
    /// <remarks/>
    public void getEventsAsync(object userState) {
        if ((this.getEventsOperationCompleted == null)) {
            this.getEventsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEventsOperationCompleted);
        }
        this.InvokeAsync("getEvents", new object[0], this.getEventsOperationCompleted, userState);
    }
    
    private void OngetEventsOperationCompleted(object arg) {
        if ((this.getEventsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getEventsCompleted(this, new getEventsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("LiveTickerService/LiveTickerService/getEventUpdates", RequestNamespace="LiveTickerService", ResponseNamespace="LiveTickerService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public EventUpdate[] getEventUpdates(System.DateTime modifiedAfter) {
        object[] results = this.Invoke("getEventUpdates", new object[] {
                    modifiedAfter});
        return ((EventUpdate[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetEventUpdates(System.DateTime modifiedAfter, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getEventUpdates", new object[] {
                    modifiedAfter}, callback, asyncState);
    }
    
    /// <remarks/>
    public EventUpdate[] EndgetEventUpdates(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((EventUpdate[])(results[0]));
    }
    
    /// <remarks/>
    public void getEventUpdatesAsync(System.DateTime modifiedAfter) {
        this.getEventUpdatesAsync(modifiedAfter, null);
    }
    
    /// <remarks/>
    public void getEventUpdatesAsync(System.DateTime modifiedAfter, object userState) {
        if ((this.getEventUpdatesOperationCompleted == null)) {
            this.getEventUpdatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEventUpdatesOperationCompleted);
        }
        this.InvokeAsync("getEventUpdates", new object[] {
                    modifiedAfter}, this.getEventUpdatesOperationCompleted, userState);
    }
    
    private void OngetEventUpdatesOperationCompleted(object arg) {
        if ((this.getEventUpdatesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getEventUpdatesCompleted(this, new getEventUpdatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("LiveTickerService/LiveTickerService/getEvent", RequestNamespace="LiveTickerService", ResponseNamespace="LiveTickerService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public Event getEvent(int id) {
        object[] results = this.Invoke("getEvent", new object[] {
                    id});
        return ((Event)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetEvent(int id, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getEvent", new object[] {
                    id}, callback, asyncState);
    }
    
    /// <remarks/>
    public Event EndgetEvent(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Event)(results[0]));
    }
    
    /// <remarks/>
    public void getEventAsync(int id) {
        this.getEventAsync(id, null);
    }
    
    /// <remarks/>
    public void getEventAsync(int id, object userState) {
        if ((this.getEventOperationCompleted == null)) {
            this.getEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEventOperationCompleted);
        }
        this.InvokeAsync("getEvent", new object[] {
                    id}, this.getEventOperationCompleted, userState);
    }
    
    private void OngetEventOperationCompleted(object arg) {
        if ((this.getEventCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getEventCompleted(this, new getEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("LiveTickerService/LiveTickerService/getIconForEvent", RequestNamespace="LiveTickerService", ResponseNamespace="LiveTickerService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
    public byte[] getIconForEvent(int id) {
        object[] results = this.Invoke("getIconForEvent", new object[] {
                    id});
        return ((byte[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetIconForEvent(int id, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getIconForEvent", new object[] {
                    id}, callback, asyncState);
    }
    
    /// <remarks/>
    public byte[] EndgetIconForEvent(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((byte[])(results[0]));
    }
    
    /// <remarks/>
    public void getIconForEventAsync(int id) {
        this.getIconForEventAsync(id, null);
    }
    
    /// <remarks/>
    public void getIconForEventAsync(int id, object userState) {
        if ((this.getIconForEventOperationCompleted == null)) {
            this.getIconForEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetIconForEventOperationCompleted);
        }
        this.InvokeAsync("getIconForEvent", new object[] {
                    id}, this.getIconForEventOperationCompleted, userState);
    }
    
    private void OngetIconForEventOperationCompleted(object arg) {
        if ((this.getIconForEventCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getIconForEventCompleted(this, new getIconForEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("LiveTickerService/LiveTickerService/modifyEventTitle", RequestNamespace="LiveTickerService", ResponseNamespace="LiveTickerService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void modifyEventTitle(int event_id, string newTitle) {
        this.Invoke("modifyEventTitle", new object[] {
                    event_id,
                    newTitle});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginmodifyEventTitle(int event_id, string newTitle, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("modifyEventTitle", new object[] {
                    event_id,
                    newTitle}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndmodifyEventTitle(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void modifyEventTitleAsync(int event_id, string newTitle) {
        this.modifyEventTitleAsync(event_id, newTitle, null);
    }
    
    /// <remarks/>
    public void modifyEventTitleAsync(int event_id, string newTitle, object userState) {
        if ((this.modifyEventTitleOperationCompleted == null)) {
            this.modifyEventTitleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmodifyEventTitleOperationCompleted);
        }
        this.InvokeAsync("modifyEventTitle", new object[] {
                    event_id,
                    newTitle}, this.modifyEventTitleOperationCompleted, userState);
    }
    
    private void OnmodifyEventTitleOperationCompleted(object arg) {
        if ((this.modifyEventTitleCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.modifyEventTitleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("LiveTickerService/LiveTickerService/modifyEventDescription", RequestNamespace="LiveTickerService", ResponseNamespace="LiveTickerService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void modifyEventDescription(int event_id, string newDescription) {
        this.Invoke("modifyEventDescription", new object[] {
                    event_id,
                    newDescription});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginmodifyEventDescription(int event_id, string newDescription, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("modifyEventDescription", new object[] {
                    event_id,
                    newDescription}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndmodifyEventDescription(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void modifyEventDescriptionAsync(int event_id, string newDescription) {
        this.modifyEventDescriptionAsync(event_id, newDescription, null);
    }
    
    /// <remarks/>
    public void modifyEventDescriptionAsync(int event_id, string newDescription, object userState) {
        if ((this.modifyEventDescriptionOperationCompleted == null)) {
            this.modifyEventDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmodifyEventDescriptionOperationCompleted);
        }
        this.InvokeAsync("modifyEventDescription", new object[] {
                    event_id,
                    newDescription}, this.modifyEventDescriptionOperationCompleted, userState);
    }
    
    private void OnmodifyEventDescriptionOperationCompleted(object arg) {
        if ((this.modifyEventDescriptionCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.modifyEventDescriptionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("LiveTickerService/LiveTickerService/modifyEventDate", RequestNamespace="LiveTickerService", ResponseNamespace="LiveTickerService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void modifyEventDate(int event_id, System.DateTime newDate) {
        this.Invoke("modifyEventDate", new object[] {
                    event_id,
                    newDate});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginmodifyEventDate(int event_id, System.DateTime newDate, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("modifyEventDate", new object[] {
                    event_id,
                    newDate}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndmodifyEventDate(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void modifyEventDateAsync(int event_id, System.DateTime newDate) {
        this.modifyEventDateAsync(event_id, newDate, null);
    }
    
    /// <remarks/>
    public void modifyEventDateAsync(int event_id, System.DateTime newDate, object userState) {
        if ((this.modifyEventDateOperationCompleted == null)) {
            this.modifyEventDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmodifyEventDateOperationCompleted);
        }
        this.InvokeAsync("modifyEventDate", new object[] {
                    event_id,
                    newDate}, this.modifyEventDateOperationCompleted, userState);
    }
    
    private void OnmodifyEventDateOperationCompleted(object arg) {
        if ((this.modifyEventDateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.modifyEventDateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("LiveTickerService/LiveTickerService/modifyEventIcon", RequestNamespace="LiveTickerService", ResponseNamespace="LiveTickerService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void modifyEventIcon(int event_id, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] newIcon) {
        this.Invoke("modifyEventIcon", new object[] {
                    event_id,
                    newIcon});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginmodifyEventIcon(int event_id, byte[] newIcon, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("modifyEventIcon", new object[] {
                    event_id,
                    newIcon}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndmodifyEventIcon(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void modifyEventIconAsync(int event_id, byte[] newIcon) {
        this.modifyEventIconAsync(event_id, newIcon, null);
    }
    
    /// <remarks/>
    public void modifyEventIconAsync(int event_id, byte[] newIcon, object userState) {
        if ((this.modifyEventIconOperationCompleted == null)) {
            this.modifyEventIconOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmodifyEventIconOperationCompleted);
        }
        this.InvokeAsync("modifyEventIcon", new object[] {
                    event_id,
                    newIcon}, this.modifyEventIconOperationCompleted, userState);
    }
    
    private void OnmodifyEventIconOperationCompleted(object arg) {
        if ((this.modifyEventIconCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.modifyEventIconCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("LiveTickerService/LiveTickerService/addTick", RequestNamespace="LiveTickerService", ResponseNamespace="LiveTickerService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool addTick(int event_id, System.DateTime reported, string author, string title, string message) {
        object[] results = this.Invoke("addTick", new object[] {
                    event_id,
                    reported,
                    author,
                    title,
                    message});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginaddTick(int event_id, System.DateTime reported, string author, string title, string message, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("addTick", new object[] {
                    event_id,
                    reported,
                    author,
                    title,
                    message}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndaddTick(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void addTickAsync(int event_id, System.DateTime reported, string author, string title, string message) {
        this.addTickAsync(event_id, reported, author, title, message, null);
    }
    
    /// <remarks/>
    public void addTickAsync(int event_id, System.DateTime reported, string author, string title, string message, object userState) {
        if ((this.addTickOperationCompleted == null)) {
            this.addTickOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddTickOperationCompleted);
        }
        this.InvokeAsync("addTick", new object[] {
                    event_id,
                    reported,
                    author,
                    title,
                    message}, this.addTickOperationCompleted, userState);
    }
    
    private void OnaddTickOperationCompleted(object arg) {
        if ((this.addTickCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.addTickCompleted(this, new addTickCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("LiveTickerService/LiveTickerService/getTick", RequestNamespace="LiveTickerService", ResponseNamespace="LiveTickerService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public Tick getTick(int id) {
        object[] results = this.Invoke("getTick", new object[] {
                    id});
        return ((Tick)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetTick(int id, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getTick", new object[] {
                    id}, callback, asyncState);
    }
    
    /// <remarks/>
    public Tick EndgetTick(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Tick)(results[0]));
    }
    
    /// <remarks/>
    public void getTickAsync(int id) {
        this.getTickAsync(id, null);
    }
    
    /// <remarks/>
    public void getTickAsync(int id, object userState) {
        if ((this.getTickOperationCompleted == null)) {
            this.getTickOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTickOperationCompleted);
        }
        this.InvokeAsync("getTick", new object[] {
                    id}, this.getTickOperationCompleted, userState);
    }
    
    private void OngetTickOperationCompleted(object arg) {
        if ((this.getTickCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getTickCompleted(this, new getTickCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("LiveTickerService/LiveTickerService/getTickUpdates", RequestNamespace="LiveTickerService", ResponseNamespace="LiveTickerService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public TickUpdate[] getTickUpdates(int event_id, System.DateTime modifiedAfter) {
        object[] results = this.Invoke("getTickUpdates", new object[] {
                    event_id,
                    modifiedAfter});
        return ((TickUpdate[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetTickUpdates(int event_id, System.DateTime modifiedAfter, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getTickUpdates", new object[] {
                    event_id,
                    modifiedAfter}, callback, asyncState);
    }
    
    /// <remarks/>
    public TickUpdate[] EndgetTickUpdates(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((TickUpdate[])(results[0]));
    }
    
    /// <remarks/>
    public void getTickUpdatesAsync(int event_id, System.DateTime modifiedAfter) {
        this.getTickUpdatesAsync(event_id, modifiedAfter, null);
    }
    
    /// <remarks/>
    public void getTickUpdatesAsync(int event_id, System.DateTime modifiedAfter, object userState) {
        if ((this.getTickUpdatesOperationCompleted == null)) {
            this.getTickUpdatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTickUpdatesOperationCompleted);
        }
        this.InvokeAsync("getTickUpdates", new object[] {
                    event_id,
                    modifiedAfter}, this.getTickUpdatesOperationCompleted, userState);
    }
    
    private void OngetTickUpdatesOperationCompleted(object arg) {
        if ((this.getTickUpdatesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getTickUpdatesCompleted(this, new getTickUpdatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("LiveTickerService/LiveTickerService/getAllTicks", RequestNamespace="LiveTickerService", ResponseNamespace="LiveTickerService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public Tick[] getAllTicks(int event_id) {
        object[] results = this.Invoke("getAllTicks", new object[] {
                    event_id});
        return ((Tick[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetAllTicks(int event_id, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getAllTicks", new object[] {
                    event_id}, callback, asyncState);
    }
    
    /// <remarks/>
    public Tick[] EndgetAllTicks(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Tick[])(results[0]));
    }
    
    /// <remarks/>
    public void getAllTicksAsync(int event_id) {
        this.getAllTicksAsync(event_id, null);
    }
    
    /// <remarks/>
    public void getAllTicksAsync(int event_id, object userState) {
        if ((this.getAllTicksOperationCompleted == null)) {
            this.getAllTicksOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllTicksOperationCompleted);
        }
        this.InvokeAsync("getAllTicks", new object[] {
                    event_id}, this.getAllTicksOperationCompleted, userState);
    }
    
    private void OngetAllTicksOperationCompleted(object arg) {
        if ((this.getAllTicksCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getAllTicksCompleted(this, new getAllTicksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("LiveTickerService/LiveTickerService/getAllTicksSince", RequestNamespace="LiveTickerService", ResponseNamespace="LiveTickerService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public Tick[] getAllTicksSince(int event_id, System.DateTime after) {
        object[] results = this.Invoke("getAllTicksSince", new object[] {
                    event_id,
                    after});
        return ((Tick[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetAllTicksSince(int event_id, System.DateTime after, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getAllTicksSince", new object[] {
                    event_id,
                    after}, callback, asyncState);
    }
    
    /// <remarks/>
    public Tick[] EndgetAllTicksSince(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Tick[])(results[0]));
    }
    
    /// <remarks/>
    public void getAllTicksSinceAsync(int event_id, System.DateTime after) {
        this.getAllTicksSinceAsync(event_id, after, null);
    }
    
    /// <remarks/>
    public void getAllTicksSinceAsync(int event_id, System.DateTime after, object userState) {
        if ((this.getAllTicksSinceOperationCompleted == null)) {
            this.getAllTicksSinceOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllTicksSinceOperationCompleted);
        }
        this.InvokeAsync("getAllTicksSince", new object[] {
                    event_id,
                    after}, this.getAllTicksSinceOperationCompleted, userState);
    }
    
    private void OngetAllTicksSinceOperationCompleted(object arg) {
        if ((this.getAllTicksSinceCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getAllTicksSinceCompleted(this, new getAllTicksSinceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("LiveTickerService/LiveTickerService/getTickUpdatesAdmin", RequestNamespace="LiveTickerService", ResponseNamespace="LiveTickerService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public TickUpdate[] getTickUpdatesAdmin(int event_id, System.DateTime modifiedAfter) {
        object[] results = this.Invoke("getTickUpdatesAdmin", new object[] {
                    event_id,
                    modifiedAfter});
        return ((TickUpdate[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetTickUpdatesAdmin(int event_id, System.DateTime modifiedAfter, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getTickUpdatesAdmin", new object[] {
                    event_id,
                    modifiedAfter}, callback, asyncState);
    }
    
    /// <remarks/>
    public TickUpdate[] EndgetTickUpdatesAdmin(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((TickUpdate[])(results[0]));
    }
    
    /// <remarks/>
    public void getTickUpdatesAdminAsync(int event_id, System.DateTime modifiedAfter) {
        this.getTickUpdatesAdminAsync(event_id, modifiedAfter, null);
    }
    
    /// <remarks/>
    public void getTickUpdatesAdminAsync(int event_id, System.DateTime modifiedAfter, object userState) {
        if ((this.getTickUpdatesAdminOperationCompleted == null)) {
            this.getTickUpdatesAdminOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTickUpdatesAdminOperationCompleted);
        }
        this.InvokeAsync("getTickUpdatesAdmin", new object[] {
                    event_id,
                    modifiedAfter}, this.getTickUpdatesAdminOperationCompleted, userState);
    }
    
    private void OngetTickUpdatesAdminOperationCompleted(object arg) {
        if ((this.getTickUpdatesAdminCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getTickUpdatesAdminCompleted(this, new getTickUpdatesAdminCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("LiveTickerService/LiveTickerService/getAllTicksAdmin", RequestNamespace="LiveTickerService", ResponseNamespace="LiveTickerService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public Tick[] getAllTicksAdmin(int event_id) {
        object[] results = this.Invoke("getAllTicksAdmin", new object[] {
                    event_id});
        return ((Tick[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetAllTicksAdmin(int event_id, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getAllTicksAdmin", new object[] {
                    event_id}, callback, asyncState);
    }
    
    /// <remarks/>
    public Tick[] EndgetAllTicksAdmin(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Tick[])(results[0]));
    }
    
    /// <remarks/>
    public void getAllTicksAdminAsync(int event_id) {
        this.getAllTicksAdminAsync(event_id, null);
    }
    
    /// <remarks/>
    public void getAllTicksAdminAsync(int event_id, object userState) {
        if ((this.getAllTicksAdminOperationCompleted == null)) {
            this.getAllTicksAdminOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllTicksAdminOperationCompleted);
        }
        this.InvokeAsync("getAllTicksAdmin", new object[] {
                    event_id}, this.getAllTicksAdminOperationCompleted, userState);
    }
    
    private void OngetAllTicksAdminOperationCompleted(object arg) {
        if ((this.getAllTicksAdminCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getAllTicksAdminCompleted(this, new getAllTicksAdminCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("LiveTickerService/LiveTickerService/getAllTicksSinceAdmin", RequestNamespace="LiveTickerService", ResponseNamespace="LiveTickerService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public Tick[] getAllTicksSinceAdmin(int event_id, System.DateTime after) {
        object[] results = this.Invoke("getAllTicksSinceAdmin", new object[] {
                    event_id,
                    after});
        return ((Tick[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetAllTicksSinceAdmin(int event_id, System.DateTime after, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getAllTicksSinceAdmin", new object[] {
                    event_id,
                    after}, callback, asyncState);
    }
    
    /// <remarks/>
    public Tick[] EndgetAllTicksSinceAdmin(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Tick[])(results[0]));
    }
    
    /// <remarks/>
    public void getAllTicksSinceAdminAsync(int event_id, System.DateTime after) {
        this.getAllTicksSinceAdminAsync(event_id, after, null);
    }
    
    /// <remarks/>
    public void getAllTicksSinceAdminAsync(int event_id, System.DateTime after, object userState) {
        if ((this.getAllTicksSinceAdminOperationCompleted == null)) {
            this.getAllTicksSinceAdminOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllTicksSinceAdminOperationCompleted);
        }
        this.InvokeAsync("getAllTicksSinceAdmin", new object[] {
                    event_id,
                    after}, this.getAllTicksSinceAdminOperationCompleted, userState);
    }
    
    private void OngetAllTicksSinceAdminOperationCompleted(object arg) {
        if ((this.getAllTicksSinceAdminCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getAllTicksSinceAdminCompleted(this, new getAllTicksSinceAdminCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("LiveTickerService/LiveTickerService/publishTick", RequestNamespace="LiveTickerService", ResponseNamespace="LiveTickerService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool publishTick(int id) {
        object[] results = this.Invoke("publishTick", new object[] {
                    id});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginpublishTick(int id, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("publishTick", new object[] {
                    id}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndpublishTick(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void publishTickAsync(int id) {
        this.publishTickAsync(id, null);
    }
    
    /// <remarks/>
    public void publishTickAsync(int id, object userState) {
        if ((this.publishTickOperationCompleted == null)) {
            this.publishTickOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpublishTickOperationCompleted);
        }
        this.InvokeAsync("publishTick", new object[] {
                    id}, this.publishTickOperationCompleted, userState);
    }
    
    private void OnpublishTickOperationCompleted(object arg) {
        if ((this.publishTickCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.publishTickCompleted(this, new publishTickCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("LiveTickerService/LiveTickerService/deleteTick", RequestNamespace="LiveTickerService", ResponseNamespace="LiveTickerService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool deleteTick(int id) {
        object[] results = this.Invoke("deleteTick", new object[] {
                    id});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegindeleteTick(int id, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("deleteTick", new object[] {
                    id}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EnddeleteTick(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void deleteTickAsync(int id) {
        this.deleteTickAsync(id, null);
    }
    
    /// <remarks/>
    public void deleteTickAsync(int id, object userState) {
        if ((this.deleteTickOperationCompleted == null)) {
            this.deleteTickOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteTickOperationCompleted);
        }
        this.InvokeAsync("deleteTick", new object[] {
                    id}, this.deleteTickOperationCompleted, userState);
    }
    
    private void OndeleteTickOperationCompleted(object arg) {
        if ((this.deleteTickCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.deleteTickCompleted(this, new deleteTickCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("LiveTickerService/LiveTickerService/canUpdateCache", RequestNamespace="LiveTickerService", ResponseNamespace="LiveTickerService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool canUpdateCache(System.DateTime lastUpdate) {
        object[] results = this.Invoke("canUpdateCache", new object[] {
                    lastUpdate});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegincanUpdateCache(System.DateTime lastUpdate, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("canUpdateCache", new object[] {
                    lastUpdate}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndcanUpdateCache(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void canUpdateCacheAsync(System.DateTime lastUpdate) {
        this.canUpdateCacheAsync(lastUpdate, null);
    }
    
    /// <remarks/>
    public void canUpdateCacheAsync(System.DateTime lastUpdate, object userState) {
        if ((this.canUpdateCacheOperationCompleted == null)) {
            this.canUpdateCacheOperationCompleted = new System.Threading.SendOrPostCallback(this.OncanUpdateCacheOperationCompleted);
        }
        this.InvokeAsync("canUpdateCache", new object[] {
                    lastUpdate}, this.canUpdateCacheOperationCompleted, userState);
    }
    
    private void OncanUpdateCacheOperationCompleted(object arg) {
        if ((this.canUpdateCacheCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.canUpdateCacheCompleted(this, new canUpdateCacheCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="LiveTickerService")]
public partial class Event {
    
    private int idField;
    
    private string textField;
    
    private string descriptionField;
    
    private byte[] iconField;
    
    private System.DateTime whenField;
    
    /// <remarks/>
    public int id {
        get {
            return this.idField;
        }
        set {
            this.idField = value;
        }
    }
    
    /// <remarks/>
    public string text {
        get {
            return this.textField;
        }
        set {
            this.textField = value;
        }
    }
    
    /// <remarks/>
    public string description {
        get {
            return this.descriptionField;
        }
        set {
            this.descriptionField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
    public byte[] icon {
        get {
            return this.iconField;
        }
        set {
            this.iconField = value;
        }
    }
    
    /// <remarks/>
    public System.DateTime when {
        get {
            return this.whenField;
        }
        set {
            this.whenField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="LiveTickerService")]
public partial class TickUpdate {
    
    private int tick_idField;
    
    private string reasonField;
    
    /// <remarks/>
    public int tick_id {
        get {
            return this.tick_idField;
        }
        set {
            this.tick_idField = value;
        }
    }
    
    /// <remarks/>
    public string reason {
        get {
            return this.reasonField;
        }
        set {
            this.reasonField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="LiveTickerService")]
public partial class Tick {
    
    private int idField;
    
    private int event_idField;
    
    private bool is_publishedField;
    
    private bool is_deletedField;
    
    private System.DateTime reportedField;
    
    private System.DateTime modifiedField;
    
    private System.DateTime createdField;
    
    private string authorField;
    
    private string titleField;
    
    private string messageField;
    
    /// <remarks/>
    public int id {
        get {
            return this.idField;
        }
        set {
            this.idField = value;
        }
    }
    
    /// <remarks/>
    public int event_id {
        get {
            return this.event_idField;
        }
        set {
            this.event_idField = value;
        }
    }
    
    /// <remarks/>
    public bool is_published {
        get {
            return this.is_publishedField;
        }
        set {
            this.is_publishedField = value;
        }
    }
    
    /// <remarks/>
    public bool is_deleted {
        get {
            return this.is_deletedField;
        }
        set {
            this.is_deletedField = value;
        }
    }
    
    /// <remarks/>
    public System.DateTime reported {
        get {
            return this.reportedField;
        }
        set {
            this.reportedField = value;
        }
    }
    
    /// <remarks/>
    public System.DateTime modified {
        get {
            return this.modifiedField;
        }
        set {
            this.modifiedField = value;
        }
    }
    
    /// <remarks/>
    public System.DateTime created {
        get {
            return this.createdField;
        }
        set {
            this.createdField = value;
        }
    }
    
    /// <remarks/>
    public string author {
        get {
            return this.authorField;
        }
        set {
            this.authorField = value;
        }
    }
    
    /// <remarks/>
    public string title {
        get {
            return this.titleField;
        }
        set {
            this.titleField = value;
        }
    }
    
    /// <remarks/>
    public string message {
        get {
            return this.messageField;
        }
        set {
            this.messageField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="LiveTickerService")]
public partial class EventUpdate {
    
    private int event_idField;
    
    private string reasonField;
    
    /// <remarks/>
    public int event_id {
        get {
            return this.event_idField;
        }
        set {
            this.event_idField = value;
        }
    }
    
    /// <remarks/>
    public string reason {
        get {
            return this.reasonField;
        }
        set {
            this.reasonField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void addEventCompletedEventHandler(object sender, addEventCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class addEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal addEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void deleteEventCompletedEventHandler(object sender, deleteEventCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class deleteEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal deleteEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void getEventsCompletedEventHandler(object sender, getEventsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getEventsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getEventsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public Event[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((Event[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void getEventUpdatesCompletedEventHandler(object sender, getEventUpdatesCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getEventUpdatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getEventUpdatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public EventUpdate[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((EventUpdate[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void getEventCompletedEventHandler(object sender, getEventCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public Event Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((Event)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void getIconForEventCompletedEventHandler(object sender, getIconForEventCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getIconForEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getIconForEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public byte[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((byte[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void modifyEventTitleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void modifyEventDescriptionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void modifyEventDateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void modifyEventIconCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void addTickCompletedEventHandler(object sender, addTickCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class addTickCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal addTickCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void getTickCompletedEventHandler(object sender, getTickCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getTickCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getTickCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public Tick Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((Tick)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void getTickUpdatesCompletedEventHandler(object sender, getTickUpdatesCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getTickUpdatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getTickUpdatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public TickUpdate[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((TickUpdate[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void getAllTicksCompletedEventHandler(object sender, getAllTicksCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getAllTicksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getAllTicksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public Tick[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((Tick[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void getAllTicksSinceCompletedEventHandler(object sender, getAllTicksSinceCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getAllTicksSinceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getAllTicksSinceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public Tick[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((Tick[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void getTickUpdatesAdminCompletedEventHandler(object sender, getTickUpdatesAdminCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getTickUpdatesAdminCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getTickUpdatesAdminCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public TickUpdate[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((TickUpdate[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void getAllTicksAdminCompletedEventHandler(object sender, getAllTicksAdminCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getAllTicksAdminCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getAllTicksAdminCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public Tick[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((Tick[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void getAllTicksSinceAdminCompletedEventHandler(object sender, getAllTicksSinceAdminCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getAllTicksSinceAdminCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getAllTicksSinceAdminCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public Tick[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((Tick[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void publishTickCompletedEventHandler(object sender, publishTickCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class publishTickCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal publishTickCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void deleteTickCompletedEventHandler(object sender, deleteTickCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class deleteTickCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal deleteTickCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void canUpdateCacheCompletedEventHandler(object sender, canUpdateCacheCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class canUpdateCacheCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal canUpdateCacheCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}
